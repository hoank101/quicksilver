// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/interchainstaking/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParamsV1 struct {
	DepositInterval      uint64                      `protobuf:"varint,1,opt,name=deposit_interval,json=depositInterval,proto3" json:"deposit_interval,omitempty"`
	ValidatorsetInterval uint64                      `protobuf:"varint,2,opt,name=validatorset_interval,json=validatorsetInterval,proto3" json:"validatorset_interval,omitempty"`
	CommissionRate       cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=commission_rate,json=commissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission_rate"`
}

func (m *ParamsV1) Reset()      { *m = ParamsV1{} }
func (*ParamsV1) ProtoMessage() {}
func (*ParamsV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_196cdf77e041fc72, []int{0}
}
func (m *ParamsV1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsV1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsV1.Merge(m, src)
}
func (m *ParamsV1) XXX_Size() int {
	return m.Size()
}
func (m *ParamsV1) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsV1.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsV1 proto.InternalMessageInfo

func (m *ParamsV1) GetDepositInterval() uint64 {
	if m != nil {
		return m.DepositInterval
	}
	return 0
}

func (m *ParamsV1) GetValidatorsetInterval() uint64 {
	if m != nil {
		return m.ValidatorsetInterval
	}
	return 0
}

type Params struct {
	DepositInterval      uint64                      `protobuf:"varint,1,opt,name=deposit_interval,json=depositInterval,proto3" json:"deposit_interval,omitempty"`
	ValidatorsetInterval uint64                      `protobuf:"varint,2,opt,name=validatorset_interval,json=validatorsetInterval,proto3" json:"validatorset_interval,omitempty"`
	CommissionRate       cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=commission_rate,json=commissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission_rate"`
	UnbondingEnabled     bool                        `protobuf:"varint,4,opt,name=unbonding_enabled,json=unbondingEnabled,proto3" json:"unbonding_enabled,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_196cdf77e041fc72, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDepositInterval() uint64 {
	if m != nil {
		return m.DepositInterval
	}
	return 0
}

func (m *Params) GetValidatorsetInterval() uint64 {
	if m != nil {
		return m.ValidatorsetInterval
	}
	return 0
}

func (m *Params) GetUnbondingEnabled() bool {
	if m != nil {
		return m.UnbondingEnabled
	}
	return false
}

type DelegationsForZone struct {
	ChainId     string        `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Delegations []*Delegation `protobuf:"bytes,2,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (m *DelegationsForZone) Reset()         { *m = DelegationsForZone{} }
func (m *DelegationsForZone) String() string { return proto.CompactTextString(m) }
func (*DelegationsForZone) ProtoMessage()    {}
func (*DelegationsForZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_196cdf77e041fc72, []int{2}
}
func (m *DelegationsForZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationsForZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationsForZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationsForZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationsForZone.Merge(m, src)
}
func (m *DelegationsForZone) XXX_Size() int {
	return m.Size()
}
func (m *DelegationsForZone) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationsForZone.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationsForZone proto.InternalMessageInfo

func (m *DelegationsForZone) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *DelegationsForZone) GetDelegations() []*Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

type DelegatorIntentsForZone struct {
	ChainId          string             `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	DelegationIntent []*DelegatorIntent `protobuf:"bytes,2,rep,name=delegation_intent,json=delegationIntent,proto3" json:"delegation_intent,omitempty"`
	Snapshot         bool               `protobuf:"varint,3,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *DelegatorIntentsForZone) Reset()         { *m = DelegatorIntentsForZone{} }
func (m *DelegatorIntentsForZone) String() string { return proto.CompactTextString(m) }
func (*DelegatorIntentsForZone) ProtoMessage()    {}
func (*DelegatorIntentsForZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_196cdf77e041fc72, []int{3}
}
func (m *DelegatorIntentsForZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorIntentsForZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorIntentsForZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorIntentsForZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorIntentsForZone.Merge(m, src)
}
func (m *DelegatorIntentsForZone) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorIntentsForZone) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorIntentsForZone.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorIntentsForZone proto.InternalMessageInfo

func (m *DelegatorIntentsForZone) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *DelegatorIntentsForZone) GetDelegationIntent() []*DelegatorIntent {
	if m != nil {
		return m.DelegationIntent
	}
	return nil
}

func (m *DelegatorIntentsForZone) GetSnapshot() bool {
	if m != nil {
		return m.Snapshot
	}
	return false
}

// GenesisState defines the interchainstaking module's genesis state.
type GenesisState struct {
	Params                 Params                    `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Zones                  []Zone                    `protobuf:"bytes,2,rep,name=zones,proto3" json:"zones"`
	Receipts               []Receipt                 `protobuf:"bytes,3,rep,name=receipts,proto3" json:"receipts"`
	Delegations            []DelegationsForZone      `protobuf:"bytes,4,rep,name=delegations,proto3" json:"delegations"`
	PerformanceDelegations []DelegationsForZone      `protobuf:"bytes,5,rep,name=performance_delegations,json=performanceDelegations,proto3" json:"performance_delegations"`
	DelegatorIntents       []DelegatorIntentsForZone `protobuf:"bytes,6,rep,name=delegator_intents,json=delegatorIntents,proto3" json:"delegator_intents"`
	PortConnections        []PortConnectionTuple     `protobuf:"bytes,7,rep,name=port_connections,json=portConnections,proto3" json:"port_connections"`
	WithdrawalRecords      []WithdrawalRecord        `protobuf:"bytes,8,rep,name=withdrawal_records,json=withdrawalRecords,proto3" json:"withdrawal_records"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_196cdf77e041fc72, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetZones() []Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

func (m *GenesisState) GetReceipts() []Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *GenesisState) GetDelegations() []DelegationsForZone {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *GenesisState) GetPerformanceDelegations() []DelegationsForZone {
	if m != nil {
		return m.PerformanceDelegations
	}
	return nil
}

func (m *GenesisState) GetDelegatorIntents() []DelegatorIntentsForZone {
	if m != nil {
		return m.DelegatorIntents
	}
	return nil
}

func (m *GenesisState) GetPortConnections() []PortConnectionTuple {
	if m != nil {
		return m.PortConnections
	}
	return nil
}

func (m *GenesisState) GetWithdrawalRecords() []WithdrawalRecord {
	if m != nil {
		return m.WithdrawalRecords
	}
	return nil
}

func init() {
	proto.RegisterType((*ParamsV1)(nil), "quicksilver.interchainstaking.v1.Params_v1")
	proto.RegisterType((*Params)(nil), "quicksilver.interchainstaking.v1.Params")
	proto.RegisterType((*DelegationsForZone)(nil), "quicksilver.interchainstaking.v1.DelegationsForZone")
	proto.RegisterType((*DelegatorIntentsForZone)(nil), "quicksilver.interchainstaking.v1.DelegatorIntentsForZone")
	proto.RegisterType((*GenesisState)(nil), "quicksilver.interchainstaking.v1.GenesisState")
}

func init() {
	proto.RegisterFile("quicksilver/interchainstaking/v1/genesis.proto", fileDescriptor_196cdf77e041fc72)
}

var fileDescriptor_196cdf77e041fc72 = []byte{
	// 699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xdb, 0x34, 0x75, 0xa7, 0x9f, 0xbe, 0xa6, 0xa3, 0x42, 0xdd, 0x22, 0x25, 0x51, 0x16,
	0x28, 0x15, 0xd4, 0x56, 0x5a, 0x10, 0x3f, 0xcb, 0x10, 0x8a, 0x2a, 0x10, 0x42, 0x06, 0x09, 0xa9,
	0x42, 0xb5, 0x26, 0xf6, 0xd4, 0x19, 0xd5, 0x9e, 0x31, 0x33, 0x13, 0x97, 0xb2, 0xe1, 0x15, 0x58,
	0xb2, 0xec, 0x23, 0xb0, 0xe0, 0x21, 0xba, 0x2c, 0xac, 0x10, 0x8b, 0x0a, 0xb5, 0x1b, 0x5e, 0x01,
	0xb1, 0x41, 0x19, 0x3b, 0x8e, 0xdb, 0x22, 0x25, 0x15, 0x2b, 0x76, 0x99, 0x7b, 0xef, 0x39, 0xe7,
	0xfe, 0x9c, 0xc8, 0xc0, 0x7c, 0xdd, 0x23, 0xee, 0xae, 0x20, 0x41, 0x8c, 0xb9, 0x45, 0xa8, 0xc4,
	0xdc, 0xed, 0x22, 0x42, 0x85, 0x44, 0xbb, 0x84, 0xfa, 0x56, 0xdc, 0xb4, 0x7c, 0x4c, 0xb1, 0x20,
	0xc2, 0x8c, 0x38, 0x93, 0x0c, 0xd6, 0x72, 0xf5, 0xe6, 0x85, 0x7a, 0x33, 0x6e, 0x2e, 0x2f, 0xb9,
	0x4c, 0x84, 0x4c, 0x38, 0xaa, 0xde, 0x4a, 0x1e, 0x09, 0x78, 0x79, 0xc1, 0x67, 0x3e, 0x4b, 0xe2,
	0xfd, 0x5f, 0x69, 0xf4, 0xee, 0xc8, 0x16, 0x2e, 0xea, 0x28, 0x64, 0xfd, 0xb3, 0x06, 0x66, 0x9e,
	0x21, 0x8e, 0x42, 0xe1, 0xc4, 0x4d, 0xb8, 0x02, 0xca, 0x1e, 0x8e, 0x98, 0x20, 0xd2, 0x51, 0x80,
	0x18, 0x05, 0x86, 0x56, 0xd3, 0x1a, 0x45, 0x7b, 0x2e, 0x8d, 0x6f, 0xa6, 0x61, 0xb8, 0x0e, 0xae,
	0xc4, 0x28, 0x20, 0x1e, 0x92, 0x8c, 0x0b, 0x9c, 0xab, 0x9f, 0x50, 0xf5, 0x0b, 0xf9, 0x64, 0x06,
	0xda, 0x02, 0x73, 0x2e, 0x0b, 0x43, 0x22, 0x04, 0x61, 0xd4, 0xe1, 0x48, 0x62, 0x63, 0xb2, 0xa6,
	0x35, 0x66, 0x5a, 0xcd, 0xc3, 0xe3, 0x6a, 0xe1, 0xdb, 0x71, 0xf5, 0x5a, 0x32, 0xac, 0xf0, 0x76,
	0x4d, 0xc2, 0xac, 0x10, 0xc9, 0xae, 0xf9, 0x04, 0xfb, 0xc8, 0xdd, 0x6f, 0x63, 0xf7, 0xcb, 0xa7,
	0x55, 0x90, 0xee, 0xa2, 0x8d, 0x5d, 0xfb, 0xff, 0x21, 0x93, 0x8d, 0x24, 0xbe, 0xaf, 0x7f, 0x38,
	0xa8, 0x16, 0x7e, 0x1c, 0x54, 0xb5, 0xfa, 0x2f, 0x0d, 0x94, 0x92, 0x99, 0xfe, 0xe5, 0x81, 0xe0,
	0x0d, 0x30, 0xdf, 0xa3, 0x1d, 0x46, 0x3d, 0x42, 0x7d, 0x07, 0x53, 0xd4, 0x09, 0xb0, 0x67, 0x14,
	0x6b, 0x5a, 0x43, 0xb7, 0xcb, 0x59, 0xe2, 0x61, 0x12, 0xcf, 0x4d, 0xff, 0x0e, 0xc0, 0x36, 0x0e,
	0xb0, 0x8f, 0x24, 0x61, 0x54, 0x6c, 0x30, 0xbe, 0xc5, 0x28, 0x86, 0x4b, 0x40, 0x57, 0xd7, 0x77,
	0x88, 0xa7, 0x16, 0x30, 0x63, 0x4f, 0xab, 0xf7, 0xa6, 0x07, 0x9f, 0x82, 0x59, 0x6f, 0x08, 0x30,
	0x26, 0x6a, 0x93, 0x8d, 0xd9, 0xb5, 0x9b, 0xe6, 0x28, 0x97, 0x9a, 0x43, 0x15, 0x3b, 0x4f, 0x50,
	0xff, 0xa8, 0x81, 0xc5, 0x34, 0xc7, 0x78, 0x7f, 0x53, 0x54, 0x8e, 0xd3, 0xc6, 0x36, 0x98, 0x1f,
	0xb2, 0xa8, 0xed, 0x53, 0x99, 0x36, 0xd3, 0x1c, 0xbb, 0x99, 0x81, 0xa0, 0x5d, 0x1e, 0x72, 0x25,
	0x11, 0xb8, 0x0c, 0x74, 0x41, 0x51, 0x24, 0xba, 0x4c, 0xaa, 0x1b, 0xe9, 0x76, 0xf6, 0xae, 0xff,
	0x9c, 0x02, 0xff, 0x3d, 0x4a, 0xfe, 0xa4, 0xcf, 0x65, 0x7f, 0xf7, 0x1b, 0xa0, 0x14, 0x29, 0x07,
	0xa9, 0x2e, 0x67, 0xd7, 0x1a, 0xa3, 0x3b, 0x48, 0x1c, 0xd7, 0x2a, 0xf6, 0x0f, 0x6f, 0xa7, 0x68,
	0xd8, 0x02, 0x53, 0x6f, 0x19, 0xc5, 0x83, 0xad, 0x5e, 0x1f, 0x4d, 0xd3, 0x5f, 0x53, 0x4a, 0x92,
	0x40, 0xe1, 0x63, 0xa0, 0x73, 0xec, 0x62, 0x12, 0x49, 0x61, 0x4c, 0x2a, 0x9a, 0x95, 0xd1, 0x34,
	0x76, 0x82, 0x48, 0x99, 0x32, 0x02, 0xf8, 0xea, 0xec, 0xb1, 0x8b, 0x8a, 0xef, 0xd6, 0x65, 0x8e,
	0x3d, 0xb8, 0x65, 0x4a, 0x9d, 0xa7, 0x83, 0x02, 0x2c, 0x46, 0x98, 0xef, 0x30, 0x1e, 0x22, 0xea,
	0x62, 0x27, 0xaf, 0x34, 0xf5, 0xd7, 0x4a, 0x57, 0x73, 0xd4, 0xb9, 0x22, 0x18, 0x64, 0xc6, 0x61,
	0x3c, 0xf5, 0x8d, 0x30, 0x4a, 0x4a, 0xee, 0xde, 0xa5, 0x8d, 0x73, 0x4e, 0xb3, 0xec, 0x9d, 0x4b,
	0xc3, 0x1d, 0x50, 0x8e, 0x18, 0x97, 0x8e, 0xcb, 0x28, 0xc5, 0x6e, 0x32, 0xdb, 0xb4, 0x12, 0xbb,
	0x3d, 0x86, 0x47, 0x18, 0x97, 0x0f, 0x32, 0xe0, 0x8b, 0x5e, 0x14, 0x0c, 0x84, 0xe6, 0xa2, 0x33,
	0x29, 0x01, 0x7d, 0x00, 0xf7, 0x88, 0xec, 0x7a, 0x1c, 0xed, 0xa1, 0xc0, 0xe1, 0xd8, 0x65, 0xdc,
	0x13, 0x86, 0xae, 0x94, 0xd6, 0x46, 0x2b, 0xbd, 0xcc, 0xb0, 0xb6, 0x82, 0xa6, 0x32, 0xf3, 0x7b,
	0xe7, 0xe2, 0xa2, 0xb5, 0x7d, 0x78, 0x52, 0xd1, 0x8e, 0x4e, 0x2a, 0xda, 0xf7, 0x93, 0x8a, 0xf6,
	0xfe, 0xb4, 0x52, 0x38, 0x3a, 0xad, 0x14, 0xbe, 0x9e, 0x56, 0x0a, 0x5b, 0x6d, 0x9f, 0xc8, 0x6e,
	0xaf, 0x63, 0xba, 0x2c, 0xb4, 0x72, 0x82, 0xab, 0x7d, 0x5b, 0xe6, 0x03, 0x56, 0x7c, 0xc7, 0x7a,
	0xf3, 0x87, 0xcf, 0x8e, 0xdc, 0x8f, 0xb0, 0xe8, 0x94, 0xd4, 0x87, 0x66, 0xfd, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5b, 0x93, 0x5d, 0x06, 0x27, 0x07, 0x00, 0x00,
}

func (this *ParamsV1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParamsV1)
	if !ok {
		that2, ok := that.(ParamsV1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DepositInterval != that1.DepositInterval {
		return false
	}
	if this.ValidatorsetInterval != that1.ValidatorsetInterval {
		return false
	}
	if !this.CommissionRate.Equal(that1.CommissionRate) {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DepositInterval != that1.DepositInterval {
		return false
	}
	if this.ValidatorsetInterval != that1.ValidatorsetInterval {
		return false
	}
	if !this.CommissionRate.Equal(that1.CommissionRate) {
		return false
	}
	if this.UnbondingEnabled != that1.UnbondingEnabled {
		return false
	}
	return true
}
func (m *ParamsV1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsV1) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsV1) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ValidatorsetInterval != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidatorsetInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.DepositInterval != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DepositInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingEnabled {
		i--
		if m.UnbondingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ValidatorsetInterval != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ValidatorsetInterval))
		i--
		dAtA[i] = 0x10
	}
	if m.DepositInterval != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DepositInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationsForZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationsForZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationsForZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorIntentsForZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorIntentsForZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorIntentsForZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snapshot {
		i--
		if m.Snapshot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DelegationIntent) > 0 {
		for iNdEx := len(m.DelegationIntent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationIntent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawalRecords) > 0 {
		for iNdEx := len(m.WithdrawalRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawalRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PortConnections) > 0 {
		for iNdEx := len(m.PortConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PortConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DelegatorIntents) > 0 {
		for iNdEx := len(m.DelegatorIntents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorIntents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PerformanceDelegations) > 0 {
		for iNdEx := len(m.PerformanceDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PerformanceDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Receipts) > 0 {
		for iNdEx := len(m.Receipts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receipts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Zones) > 0 {
		for iNdEx := len(m.Zones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Zones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParamsV1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositInterval != 0 {
		n += 1 + sovGenesis(uint64(m.DepositInterval))
	}
	if m.ValidatorsetInterval != 0 {
		n += 1 + sovGenesis(uint64(m.ValidatorsetInterval))
	}
	l = m.CommissionRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositInterval != 0 {
		n += 1 + sovGenesis(uint64(m.DepositInterval))
	}
	if m.ValidatorsetInterval != 0 {
		n += 1 + sovGenesis(uint64(m.ValidatorsetInterval))
	}
	l = m.CommissionRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.UnbondingEnabled {
		n += 2
	}
	return n
}

func (m *DelegationsForZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DelegatorIntentsForZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DelegationIntent) > 0 {
		for _, e := range m.DelegationIntent {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Snapshot {
		n += 2
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Zones) > 0 {
		for _, e := range m.Zones {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PerformanceDelegations) > 0 {
		for _, e := range m.PerformanceDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegatorIntents) > 0 {
		for _, e := range m.DelegatorIntents {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PortConnections) > 0 {
		for _, e := range m.PortConnections {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.WithdrawalRecords) > 0 {
		for _, e := range m.WithdrawalRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParamsV1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params_v1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params_v1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInterval", wireType)
			}
			m.DepositInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsetInterval", wireType)
			}
			m.ValidatorsetInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsetInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositInterval", wireType)
			}
			m.DepositInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsetInterval", wireType)
			}
			m.ValidatorsetInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsetInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnbondingEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationsForZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationsForZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationsForZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorIntentsForZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorIntentsForZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorIntentsForZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationIntent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationIntent = append(m.DelegationIntent, &DelegatorIntent{})
			if err := m.DelegationIntent[len(m.DelegationIntent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Snapshot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zones = append(m.Zones, Zone{})
			if err := m.Zones[len(m.Zones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, Receipt{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationsForZone{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerformanceDelegations = append(m.PerformanceDelegations, DelegationsForZone{})
			if err := m.PerformanceDelegations[len(m.PerformanceDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorIntents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorIntents = append(m.DelegatorIntents, DelegatorIntentsForZone{})
			if err := m.DelegatorIntents[len(m.DelegatorIntents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortConnections = append(m.PortConnections, PortConnectionTuple{})
			if err := m.PortConnections[len(m.PortConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalRecords = append(m.WithdrawalRecords, WithdrawalRecord{})
			if err := m.WithdrawalRecords[len(m.WithdrawalRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
